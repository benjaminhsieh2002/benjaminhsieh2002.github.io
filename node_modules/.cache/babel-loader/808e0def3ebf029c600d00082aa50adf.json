{"ast":null,"code":"var _jsxFileName = \"/Users/robot/Desktop/CodersSB/TraceRoot/benjaminhsieh2002.github.io/src/Backend.js\";\nimport './App.css'; // key is hash(word), value is list of language(s) in shorthand\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dictionary = {};\nlet seperatorChar = ':';\nlet a = 0; // Romance\n\nlet b = 0; // Germanic\n\nlet c = 0; // Other\n\nlet d = 0; // Total Number of Words\n\nlet text = \"Finally some sun under the clouds!\";\nlet word;\n\nfunction Backend() {\n  ParseDictionary();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Testing word: \", word]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [word, \" is hash # \", Hash(word)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [word, \" is in the dictionary: \", HasWord(\"dog\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"//   \", test, \" has value \", SeperateInput(test)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Percent Romance: \", GetRomancePercent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 2\n  }, this);\n  SeperateInput(text); // PROBLEM: ONLY THIS CALL TO SEPERATEINPUT WILL BE PROCESSED (in the constructor), OTHER CALLS TO SEPERATEINPUT IN OTHER FILES CURRENTLY NOT WORKING\n}\n\n_c = Backend;\nexport function Increment(number) {\n  alert(number + 1);\n} // returns true if dictionary contains word.\n\n_c2 = Increment;\nexport function HasWord(wordP) {\n  if (dictionary[Hash(wordP)] == null) {\n    return false;\n  } else {\n    return true;\n  }\n} // returns Romance, Germanic, or Other given a word\n\n_c3 = HasWord;\nexport function GetValue(wordP) {\n  let num = dictionary[Hash(wordP)];\n\n  if (num == 0) {\n    return \"Romance\";\n  }\n\n  if (num == 1) {\n    return \"Germanic\";\n  }\n\n  return \"Other\";\n} // returns 0, 1, or 2 given a word. same as function above\n\n_c4 = GetValue;\nexport function GetValueNumber(wordP) {\n  let num = dictionary[Hash(wordP)];\n  return num;\n} // given a single string of words seperated by spaces, returns list of valid words\n\n_c5 = GetValueNumber;\nexport function SeperateInput(stringP) {\n  console.log(\"1\");\n\n  if (stringP.length == 0) {\n    return null;\n  }\n\n  let strings = stringP.split(\" \");\n  a = 0;\n  b = 0;\n  c = 0;\n  d = 0;\n  let i = 0;\n\n  for (i = 0; i < strings.length; i++) {\n    // for each word\n    let newString = \"\";\n\n    for (let j = 0; j < strings[i].length; j++) {\n      // for each char\n      let c = strings[i].charCodeAt(j);\n      let updatedC;\n\n      if (c > 64 && c < 91) {\n        updatedC = String.fromCharCode(c + 32);\n        newString += updatedC;\n      } else if (c < 65 || c > 122 || c > 90 && c < 97) {//do nothing\n      } else {\n        newString += String.fromCharCode(c);\n      }\n    }\n\n    strings[i] = newString;\n  }\n\n  for (i = 0; i < strings.length; i++) {\n    if (HasWord(strings[i])) {\n      if (GetValueNumber(strings[i]) == 0) {\n        a = a + 1;\n      } else if (GetValueNumber(strings[i]) == 1) {\n        b = b + 1;\n      } else {\n        // to do: check for words ending in s (plural) or other odd endings\n        c = c + 1;\n      }\n    } else {\n      c = c + 1;\n    }\n\n    d = d + 1;\n  }\n\n  return strings;\n}\n_c6 = SeperateInput;\nexport function GetRomancePercent() {\n  let percent = 0.0;\n\n  if (d == 0) {\n    return percent;\n  }\n\n  percent = a / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\n_c7 = GetRomancePercent;\nexport function GetGermanicPercent() {\n  let percent = 0.0;\n\n  if (d == 0) {\n    return percent;\n  }\n\n  percent = b / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\n_c8 = GetGermanicPercent;\nexport function GetOtherPercent() {\n  let percent = 0.0;\n\n  if (d == 0) {\n    return percent;\n  }\n\n  percent = c / d;\n  percent = percent * 100;\n  return Math.round(percent);\n} //\n// IT IS SAFE TO IGNORE ALL BELOW CODE\n//\n//hash function code provided by the internet\n\n_c9 = GetOtherPercent;\nexport function Hash(stringP) {\n  let h = 0;\n  let i = 0;\n\n  for (i = 0; i < stringP.length; i++) {\n    let ch = stringP.charCodeAt(i);\n    h = (h << 5) - h + ch;\n    h = h & h;\n  }\n\n  return h;\n} // opens text file, reads each line, and saves information to dictionary\n\n_c10 = Hash;\nexport function ParseDictionary() {\n  let rawFile = new XMLHttpRequest();\n  let path = \"./dictionary.txt\";\n  rawFile.open(\"GET\", path, false);\n\n  rawFile.onreadystatechange = function () {\n    if (rawFile.readyState === 4) {\n      if (rawFile.status === 200 || rawFile.status === 0) {\n        let allText = rawFile.responseText;\n\n        while (allText.includes(\"\\n\")) {\n          let line = allText.substring(0, allText.indexOf(\"\\n\"));\n          let curWord = line.substring(0, line.indexOf(seperatorChar));\n          let remainder = line.substring(line.indexOf(seperatorChar) + 1);\n          dictionary[Hash(curWord)] = remainder.substr(0, 1);\n          allText = allText.substring(allText.indexOf(\"\\n\") + 1);\n        }\n      }\n    }\n  };\n\n  rawFile.send();\n}\n_c11 = ParseDictionary;\nexport default Backend;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"Backend\");\n$RefreshReg$(_c2, \"Increment\");\n$RefreshReg$(_c3, \"HasWord\");\n$RefreshReg$(_c4, \"GetValue\");\n$RefreshReg$(_c5, \"GetValueNumber\");\n$RefreshReg$(_c6, \"SeperateInput\");\n$RefreshReg$(_c7, \"GetRomancePercent\");\n$RefreshReg$(_c8, \"GetGermanicPercent\");\n$RefreshReg$(_c9, \"GetOtherPercent\");\n$RefreshReg$(_c10, \"Hash\");\n$RefreshReg$(_c11, \"ParseDictionary\");","map":{"version":3,"sources":["/Users/robot/Desktop/CodersSB/TraceRoot/benjaminhsieh2002.github.io/src/Backend.js"],"names":["dictionary","seperatorChar","a","b","c","d","text","word","Backend","ParseDictionary","Hash","HasWord","test","SeperateInput","GetRomancePercent","Increment","number","alert","wordP","GetValue","num","GetValueNumber","stringP","console","log","length","strings","split","i","newString","j","charCodeAt","updatedC","String","fromCharCode","percent","Math","round","GetGermanicPercent","GetOtherPercent","h","ch","rawFile","XMLHttpRequest","path","open","onreadystatechange","readyState","status","allText","responseText","includes","line","substring","indexOf","curWord","remainder","substr","send"],"mappings":";AACA,OAAO,WAAP,C,CAEA;;;AACA,IAAIA,UAAU,GAAG,EAAjB;AACA,IAAIC,aAAa,GAAG,GAApB;AACA,IAAIC,CAAC,GAAG,CAAR,C,CAAW;;AACX,IAAIC,CAAC,GAAG,CAAR,C,CAAW;;AACX,IAAIC,CAAC,GAAG,CAAR,C,CAAW;;AACX,IAAIC,CAAC,GAAG,CAAR,C,CAAW;;AACX,IAAIC,IAAI,GAAG,oCAAX;AACA,IAAIC,IAAJ;;AACA,SAASC,OAAT,GAAmB;AACjBC,EAAAA,eAAe;AAEf,sBACD;AAAA,4BACO;AAAA,mCACiBF,IADjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADP,eAIO;AAAA,iBACGA,IADH,iBACoBG,IAAI,CAACH,IAAD,CADxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJP,eAOO;AAAA,iBACGA,IADH,6BACgCI,OAAO,CAAC,KAAD,CADvC;AAAA;AAAA;AAAA;AAAA;AAAA,YAPP,eAUM;AAAA,0BACMC,IADN,iBACuBC,aAAa,CAACD,IAAD,CADpC;AAAA;AAAA;AAAA;AAAA;AAAA,YAVN,eAaO;AAAA,sCACoBE,iBAAiB,EADrC;AAAA;AAAA;AAAA;AAAA;AAAA,YAbP;AAAA;AAAA;AAAA;AAAA;AAAA,UADC;AAoBAD,EAAAA,aAAa,CAACP,IAAD,CAAb,CAvBiB,CAuBI;AACtB;;KAxBQE,O;AA0BT,OAAO,SAASO,SAAT,CAAmBC,MAAnB,EAA2B;AAChCC,EAAAA,KAAK,CAACD,MAAM,GAAG,CAAV,CAAL;AACD,C,CAED;;MAJgBD,S;AAKhB,OAAO,SAASJ,OAAT,CAAiBO,KAAjB,EAAuB;AAC5B,MAAGlB,UAAU,CAACU,IAAI,CAACQ,KAAD,CAAL,CAAV,IAA2B,IAA9B,EAAmC;AACjC,WAAO,KAAP;AACD,GAFD,MAGI;AACF,WAAO,IAAP;AACD;AACF,C,CAID;;MAXgBP,O;AAYhB,OAAO,SAASQ,QAAT,CAAkBD,KAAlB,EAAwB;AAC7B,MAAIE,GAAG,GAAGpB,UAAU,CAACU,IAAI,CAACQ,KAAD,CAAL,CAApB;;AACA,MAAGE,GAAG,IAAI,CAAV,EAAY;AACV,WAAO,SAAP;AACD;;AACD,MAAGA,GAAG,IAAI,CAAV,EAAY;AACV,WAAO,UAAP;AACD;;AACD,SAAO,OAAP;AACD,C,CACD;;MAVgBD,Q;AAWhB,OAAO,SAASE,cAAT,CAAwBH,KAAxB,EAA8B;AACnC,MAAIE,GAAG,GAAGpB,UAAU,CAACU,IAAI,CAACQ,KAAD,CAAL,CAApB;AACA,SAAOE,GAAP;AACD,C,CAED;;MALgBC,c;AAMhB,OAAO,SAASR,aAAT,CAAuBS,OAAvB,EAA+B;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,MAAGF,OAAO,CAACG,MAAR,IAAkB,CAArB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,MAAIC,OAAO,GAAGJ,OAAO,CAACK,KAAR,CAAc,GAAd,CAAd;AACAzB,EAAAA,CAAC,GAAG,CAAJ;AACAC,EAAAA,CAAC,GAAG,CAAJ;AACAC,EAAAA,CAAC,GAAG,CAAJ;AACAC,EAAAA,CAAC,GAAG,CAAJ;AACA,MAAIuB,CAAC,GAAG,CAAR;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,OAAO,CAACD,MAAvB,EAA+BG,CAAC,EAAhC,EAAmC;AAAE;AACnC,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,OAAO,CAACE,CAAD,CAAP,CAAWH,MAA9B,EAAsCK,CAAC,EAAvC,EAA0C;AAAE;AAC1C,UAAI1B,CAAC,GAAGsB,OAAO,CAACE,CAAD,CAAP,CAAWG,UAAX,CAAsBD,CAAtB,CAAR;AACA,UAAIE,QAAJ;;AACA,UAAG5B,CAAC,GAAG,EAAJ,IAAUA,CAAC,GAAG,EAAjB,EAAoB;AAClB4B,QAAAA,QAAQ,GAAGC,MAAM,CAACC,YAAP,CAAoB9B,CAAC,GAAG,EAAxB,CAAX;AACAyB,QAAAA,SAAS,IAAIG,QAAb;AACD,OAHD,MAIK,IAAK5B,CAAC,GAAG,EAAJ,IAAUA,CAAC,GAAG,GAAf,IAAyBA,CAAC,GAAG,EAAJ,IAAUA,CAAC,GAAG,EAA3C,EAA+C,CAClD;AACD,OAFI,MAGD;AACFyB,QAAAA,SAAS,IAAII,MAAM,CAACC,YAAP,CAAoB9B,CAApB,CAAb;AACD;AACF;;AACDsB,IAAAA,OAAO,CAACE,CAAD,CAAP,GAAaC,SAAb;AACD;;AACD,OAAID,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,OAAO,CAACD,MAAvB,EAA+BG,CAAC,EAAhC,EAAmC;AACjC,QAAGjB,OAAO,CAACe,OAAO,CAACE,CAAD,CAAR,CAAV,EAAuB;AACrB,UAAGP,cAAc,CAACK,OAAO,CAACE,CAAD,CAAR,CAAd,IAA8B,CAAjC,EAAmC;AACjC1B,QAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD,OAFD,MAGK,IAAGmB,cAAc,CAACK,OAAO,CAACE,CAAD,CAAR,CAAd,IAA8B,CAAjC,EAAmC;AACtCzB,QAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD,OAFI,MAGD;AACF;AACAC,QAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;AACF,KAXD,MAYI;AACFA,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;;AACDC,IAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;;AACD,SAAOqB,OAAP;AACD;MAhDeb,a;AAkDhB,OAAO,SAASC,iBAAT,GAA4B;AACjC,MAAIqB,OAAO,GAAG,GAAd;;AACA,MAAG9B,CAAC,IAAI,CAAR,EAAU;AACT,WAAO8B,OAAP;AACA;;AACDA,EAAAA,OAAO,GAAGjC,CAAC,GAAGG,CAAd;AACA8B,EAAAA,OAAO,GAAGA,OAAO,GAAG,GAApB;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAP;AACD;MARerB,iB;AAUhB,OAAO,SAASwB,kBAAT,GAA6B;AAClC,MAAIH,OAAO,GAAG,GAAd;;AACA,MAAG9B,CAAC,IAAI,CAAR,EAAU;AACT,WAAO8B,OAAP;AACA;;AACDA,EAAAA,OAAO,GAAGhC,CAAC,GAAGE,CAAd;AACA8B,EAAAA,OAAO,GAAGA,OAAO,GAAG,GAApB;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAP;AACD;MAReG,kB;AAShB,OAAO,SAASC,eAAT,GAA0B;AAC/B,MAAIJ,OAAO,GAAG,GAAd;;AACA,MAAG9B,CAAC,IAAI,CAAR,EAAU;AACT,WAAO8B,OAAP;AACA;;AACDA,EAAAA,OAAO,GAAG/B,CAAC,GAAGC,CAAd;AACA8B,EAAAA,OAAO,GAAGA,OAAO,GAAG,GAApB;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAP;AACD,C,CAED;AACA;AACA;AACA;;MAbgBI,e;AAchB,OAAO,SAAS7B,IAAT,CAAcY,OAAd,EAAsB;AAC3B,MAAIkB,CAAC,GAAG,CAAR;AACA,MAAIZ,CAAC,GAAG,CAAR;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGN,OAAO,CAACG,MAAvB,EAA+BG,CAAC,EAAhC,EAAmC;AACjC,QAAIa,EAAE,GAAGnB,OAAO,CAACS,UAAR,CAAmBH,CAAnB,CAAT;AACAY,IAAAA,CAAC,GAAI,CAACA,CAAC,IAAI,CAAN,IAAWA,CAAZ,GAAiBC,EAArB;AACAD,IAAAA,CAAC,GAAGA,CAAC,GAAGA,CAAR;AACD;;AACD,SAAOA,CAAP;AACD,C,CAED;;OAXgB9B,I;AAYhB,OAAO,SAASD,eAAT,GAA0B;AAC/B,MAAIiC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,MAAIC,IAAI,GAAG,kBAAX;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoBD,IAApB,EAA0B,KAA1B;;AACAF,EAAAA,OAAO,CAACI,kBAAR,GAA6B,YAAU;AACrC,QAAGJ,OAAO,CAACK,UAAR,KAAuB,CAA1B,EAA4B;AAC1B,UAAGL,OAAO,CAACM,MAAR,KAAmB,GAAnB,IAA0BN,OAAO,CAACM,MAAR,KAAmB,CAAhD,EAAkD;AAChD,YAAIC,OAAO,GAAGP,OAAO,CAACQ,YAAtB;;AACA,eAAMD,OAAO,CAACE,QAAR,CAAiB,IAAjB,CAAN,EAA6B;AAC3B,cAAIC,IAAI,GAAGH,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqBJ,OAAO,CAACK,OAAR,CAAgB,IAAhB,CAArB,CAAX;AACA,cAAIC,OAAO,GAAGH,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkBD,IAAI,CAACE,OAAL,CAAarD,aAAb,CAAlB,CAAd;AACA,cAAIuD,SAAS,GAAGJ,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACE,OAAL,CAAarD,aAAb,IAA8B,CAA7C,CAAhB;AACAD,UAAAA,UAAU,CAACU,IAAI,CAAC6C,OAAD,CAAL,CAAV,GAA4BC,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAA5B;AACAR,UAAAA,OAAO,GAAGA,OAAO,CAACI,SAAR,CAAkBJ,OAAO,CAACK,OAAR,CAAgB,IAAhB,IAAwB,CAA1C,CAAV;AACD;AACF;AACF;AACF,GAbD;;AAcAZ,EAAAA,OAAO,CAACgB,IAAR;AACD;OAnBejD,e;AAqBhB,eAAeD,OAAf","sourcesContent":["\nimport './App.css';\n\n// key is hash(word), value is list of language(s) in shorthand\nlet dictionary = {};\nlet seperatorChar = ':';\nlet a = 0; // Romance\nlet b = 0; // Germanic\nlet c = 0; // Other\nlet d = 0; // Total Number of Words\nlet text = \"Finally some sun under the clouds!\";\nlet word;\nfunction Backend() {\n  ParseDictionary();\n\n  return (\n\t<div>\n        <p>\n          Testing word: {word}\n        </p>\n        <p>\n          {word} is hash # {Hash(word)}\n        </p>\n        <p>\n          {word} is in the dictionary: {HasWord(\"dog\")}\n        </p>\n\t      <p>\n       //   {test} has value {SeperateInput(test)}\n        </p>\n        <p>\n          Percent Romance: {GetRomancePercent()}\n        </p>\n\n\t</div>\n  );\n  SeperateInput(text); // PROBLEM: ONLY THIS CALL TO SEPERATEINPUT WILL BE PROCESSED (in the constructor), OTHER CALLS TO SEPERATEINPUT IN OTHER FILES CURRENTLY NOT WORKING\n}\n\nexport function Increment(number) {\n  alert(number + 1);\n}\n\n// returns true if dictionary contains word.\nexport function HasWord(wordP){\n  if(dictionary[Hash(wordP)] == null){\n    return false;\n  }\n  else{\n    return true;\n  }\n}\n\n\n\n// returns Romance, Germanic, or Other given a word\nexport function GetValue(wordP){\n  let num = dictionary[Hash(wordP)];\n  if(num == 0){\n    return \"Romance\";\n  }\n  if(num == 1){\n    return \"Germanic\";\n  }\n  return \"Other\";\n}\n// returns 0, 1, or 2 given a word. same as function above\nexport function GetValueNumber(wordP){\n  let num = dictionary[Hash(wordP)];\n  return num;\n}\n\n// given a single string of words seperated by spaces, returns list of valid words\nexport function SeperateInput(stringP){\n  console.log(\"1\");\n  if(stringP.length == 0){\n    return null;\n  }\n  let strings = stringP.split(\" \");\n  a = 0;\n  b = 0;\n  c = 0;\n  d = 0;\n  let i = 0;\n  for(i = 0; i < strings.length; i++){ // for each word\n    let newString = \"\";\n    for(let j = 0; j < strings[i].length; j++){ // for each char\n      let c = strings[i].charCodeAt(j);\n      let updatedC;\n      if(c > 64 && c < 91){\n        updatedC = String.fromCharCode(c + 32);\n        newString += updatedC;\n      }\n      else if ((c < 65 || c > 122 ) || (c > 90 && c < 97)){\n        //do nothing\n      }\n      else{\n        newString += String.fromCharCode(c);\n      }\n    }\n    strings[i] = newString;\n  }\n  for(i = 0; i < strings.length; i++){\n    if(HasWord(strings[i])){\n      if(GetValueNumber(strings[i]) == 0){\n        a = a + 1;\n      }\n      else if(GetValueNumber(strings[i]) == 1){\n        b = b + 1;\n      }\n      else{\n        // to do: check for words ending in s (plural) or other odd endings\n        c = c + 1;\n      }\n    }\n    else{\n      c = c + 1;\n    }\n    d = d + 1;\n  }\n  return strings;\n}\n\nexport function GetRomancePercent(){\n  let percent = 0.0;\n  if(d == 0){\n\t  return percent;\n  }\n  percent = a / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\n\nexport function GetGermanicPercent(){\n  let percent = 0.0;\n  if(d == 0){\n\t  return percent;\n  }\n  percent = b / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\nexport function GetOtherPercent(){\n  let percent = 0.0;\n  if(d == 0){\n\t  return percent;\n  }\n  percent = c / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\n\n//\n// IT IS SAFE TO IGNORE ALL BELOW CODE\n//\n//hash function code provided by the internet\nexport function Hash(stringP){\n  let h = 0;\n  let i = 0;\n  for(i = 0; i < stringP.length; i++){\n    let ch = stringP.charCodeAt(i);\n    h = ((h << 5) - h) + ch;\n    h = h & h;\n  }\n  return h;\n}\n\n// opens text file, reads each line, and saves information to dictionary\nexport function ParseDictionary(){\n  let rawFile = new XMLHttpRequest();\n  let path = \"./dictionary.txt\";\n  rawFile.open(\"GET\", path, false);\n  rawFile.onreadystatechange = function(){\n    if(rawFile.readyState === 4){\n      if(rawFile.status === 200 || rawFile.status === 0){\n        let allText = rawFile.responseText;\n        while(allText.includes(\"\\n\")){\n          let line = allText.substring(0, allText.indexOf(\"\\n\"));\n          let curWord = line.substring(0, line.indexOf(seperatorChar));\n          let remainder = line.substring(line.indexOf(seperatorChar) + 1);\n          dictionary[Hash(curWord)] = remainder.substr(0, 1);\n          allText = allText.substring(allText.indexOf(\"\\n\") + 1);\n        }\n      }\n    }\n  }\n  rawFile.send();\n}\n\nexport default Backend;\n"]},"metadata":{},"sourceType":"module"}