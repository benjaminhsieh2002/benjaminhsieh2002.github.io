{"ast":null,"code":"import'./App.css';// key is hash(word), value is list of language(s) in shorthand\nvar dictionary={};var seperatorChar=':';var a=0;// Romance\nvar b=0;// Germanic\nvar c=0;// Other\nvar d=0;// Total Number of Words\nvar text=\"Finally some sun under the clouds!\";function Backend(){ParseDictionary();SeperateInput(text);// PROBLEM: ONLY THIS CALL TO SEPERATEINPUT WILL BE PROCESSED (in the constructor), OTHER CALLS TO SEPERATEINPUT IN OTHER FILES CURRENTLY NOT WORKING\n}export function Increment(number){alert(number+1);}// returns true if dictionary contains word.\nexport function HasWord(wordP){if(dictionary[Hash(wordP)]==null){return false;}else{return true;}}// returns Romance, Germanic, or Other given a word\nexport function GetValue(wordP){var num=dictionary[Hash(wordP)];if(num==0){return\"Romance\";}if(num==1){return\"Germanic\";}return\"Other\";}// returns 0, 1, or 2 given a word. same as function above\nexport function GetValueNumber(wordP){var num=dictionary[Hash(wordP)];return num;}// given a single string of words seperated by spaces, returns list of valid words\nexport function SeperateInput(stringP){if(stringP.length==0){return null;}var strings=stringP.split(\" \");a=0;b=0;c=0;d=0;var i=0;for(i=0;i<strings.length;i++){// for each word\nvar newString=\"\";for(var j=0;j<strings[i].length;j++){// for each char\nvar _c=strings[i].charCodeAt(j);var updatedC=void 0;if(_c>64&&_c<91){updatedC=String.fromCharCode(_c+32);newString+=updatedC;}else if(_c<65||_c>122||_c>90&&_c<97){//do nothing\n}else{newString+=String.fromCharCode(_c);}}strings[i]=newString;}for(i=0;i<strings.length;i++){if(HasWord(strings[i])){if(GetValueNumber(strings[i])==0){a=a+1;}else if(GetValueNumber(strings[i])==1){b=b+1;}else{// to do: check for words ending in s (plural) or other odd endings\nc=c+1;}}else{c=c+1;}d=d+1;}return strings;}export function GetRomancePercent(){var percent=0.0;if(d==0){return percent;}percent=a/d;percent=percent*100;return Math.round(percent);}export function GetGermanicPercent(){var percent=0.0;if(d==0){return percent;}percent=b/d;percent=percent*100;return Math.round(percent);}export function GetOtherPercent(){var percent=0.0;if(d==0){return percent;}percent=c/d;percent=percent*100;return Math.round(percent);}//\n// IT IS SAFE TO IGNORE ALL BELOW CODE\n//\n//hash function code provided by the internet\nexport function Hash(stringP){var h=0;var i=0;for(i=0;i<stringP.length;i++){var ch=stringP.charCodeAt(i);h=(h<<5)-h+ch;h=h&h;}return h;}// opens text file, reads each line, and saves information to dictionary\nexport function ParseDictionary(){var rawFile=new XMLHttpRequest();var path=\"./dictionary.txt\";rawFile.open(\"GET\",path,false);rawFile.onreadystatechange=function(){if(rawFile.readyState===4){if(rawFile.status===200||rawFile.status===0){var allText=rawFile.responseText;while(allText.includes(\"\\n\")){var line=allText.substring(0,allText.indexOf(\"\\n\"));var curWord=line.substring(0,line.indexOf(seperatorChar));var remainder=line.substring(line.indexOf(seperatorChar)+1);dictionary[Hash(curWord)]=remainder.substr(0,1);allText=allText.substring(allText.indexOf(\"\\n\")+1);}}}};rawFile.send();}export default Backend;","map":{"version":3,"sources":["/Users/robot/Desktop/CodersSB/TraceRoot/benjaminhsieh2002.github.io/src/Backend.js"],"names":["dictionary","seperatorChar","a","b","c","d","text","Backend","ParseDictionary","SeperateInput","Increment","number","alert","HasWord","wordP","Hash","GetValue","num","GetValueNumber","stringP","length","strings","split","i","newString","j","charCodeAt","updatedC","String","fromCharCode","GetRomancePercent","percent","Math","round","GetGermanicPercent","GetOtherPercent","h","ch","rawFile","XMLHttpRequest","path","open","onreadystatechange","readyState","status","allText","responseText","includes","line","substring","indexOf","curWord","remainder","substr","send"],"mappings":"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","sourcesContent":["import './App.css';\n\n// key is hash(word), value is list of language(s) in shorthand\nlet dictionary = {};\nlet seperatorChar = ':';\nlet a = 0; // Romance\nlet b = 0; // Germanic\nlet c = 0; // Other\nlet d = 0; // Total Number of Words\nlet text = \"Finally some sun under the clouds!\";\nfunction Backend() {\n  ParseDictionary();\n  SeperateInput(text); // PROBLEM: ONLY THIS CALL TO SEPERATEINPUT WILL BE PROCESSED (in the constructor), OTHER CALLS TO SEPERATEINPUT IN OTHER FILES CURRENTLY NOT WORKING\n}\n\nexport function Increment(number) {\n  alert(number + 1);\n}\n\n// returns true if dictionary contains word.\nexport function HasWord(wordP){\n  if(dictionary[Hash(wordP)] == null){\n    return false;\n  }\n  else{\n    return true;\n  }\n}\n\n\n\n// returns Romance, Germanic, or Other given a word\nexport function GetValue(wordP){\n  let num = dictionary[Hash(wordP)];\n  if(num == 0){\n    return \"Romance\";\n  }\n  if(num == 1){\n    return \"Germanic\";\n  }\n  return \"Other\";\n}\n// returns 0, 1, or 2 given a word. same as function above\nexport function GetValueNumber(wordP){\n  let num = dictionary[Hash(wordP)];\n  return num;\n}\n\n// given a single string of words seperated by spaces, returns list of valid words\nexport function SeperateInput(stringP){\n  if(stringP.length == 0){\n    return null;\n  }\n  let strings = stringP.split(\" \");\n  a = 0;\n  b = 0;\n  c = 0;\n  d = 0;\n  let i = 0;\n  for(i = 0; i < strings.length; i++){ // for each word\n    let newString = \"\";\n    for(let j = 0; j < strings[i].length; j++){ // for each char\n      let c = strings[i].charCodeAt(j);\n      let updatedC;\n      if(c > 64 && c < 91){\n        updatedC = String.fromCharCode(c + 32);\n        newString += updatedC;\n      }\n      else if ((c < 65 || c > 122 ) || (c > 90 && c < 97)){\n        //do nothing\n      }\n      else{\n        newString += String.fromCharCode(c);\n      }\n    }\n    strings[i] = newString;\n  }\n  for(i = 0; i < strings.length; i++){\n    if(HasWord(strings[i])){\n      if(GetValueNumber(strings[i]) == 0){\n        a = a + 1;\n      }\n      else if(GetValueNumber(strings[i]) == 1){\n        b = b + 1;\n      }\n      else{\n        // to do: check for words ending in s (plural) or other odd endings\n        c = c + 1;\n      }\n    }\n    else{\n      c = c + 1;\n    }\n    d = d + 1;\n  }\n  return strings;\n}\n\nexport function GetRomancePercent(){\n  let percent = 0.0;\n  if(d == 0){\n\t  return percent;\n  }\n  percent = a / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\n\nexport function GetGermanicPercent(){\n  let percent = 0.0;\n  if(d == 0){\n\t  return percent;\n  }\n  percent = b / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\nexport function GetOtherPercent(){\n  let percent = 0.0;\n  if(d == 0){\n\t  return percent;\n  }\n  percent = c / d;\n  percent = percent * 100;\n  return Math.round(percent);\n}\n\n//\n// IT IS SAFE TO IGNORE ALL BELOW CODE\n//\n//hash function code provided by the internet\nexport function Hash(stringP){\n  let h = 0;\n  let i = 0;\n  for(i = 0; i < stringP.length; i++){\n    let ch = stringP.charCodeAt(i);\n    h = ((h << 5) - h) + ch;\n    h = h & h;\n  }\n  return h;\n}\n\n// opens text file, reads each line, and saves information to dictionary\nexport function ParseDictionary(){\n  let rawFile = new XMLHttpRequest();\n  let path = \"./dictionary.txt\";\n  rawFile.open(\"GET\", path, false);\n  rawFile.onreadystatechange = function(){\n    if(rawFile.readyState === 4){\n      if(rawFile.status === 200 || rawFile.status === 0){\n        let allText = rawFile.responseText;\n        while(allText.includes(\"\\n\")){\n          let line = allText.substring(0, allText.indexOf(\"\\n\"));\n          let curWord = line.substring(0, line.indexOf(seperatorChar));\n          let remainder = line.substring(line.indexOf(seperatorChar) + 1);\n          dictionary[Hash(curWord)] = remainder.substr(0, 1);\n          allText = allText.substring(allText.indexOf(\"\\n\") + 1);\n        }\n      }\n    }\n  }\n  rawFile.send();\n}\n\nexport default Backend;\n"]},"metadata":{},"sourceType":"module"}